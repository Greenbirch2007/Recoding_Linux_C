




第９章　c语言程序设计



continue语句，
，结束当前这一次的循环，转而执行下一次循环


break语句，循环体内以后的均不执行

５．　return语句
用于函数返回值，

return(表达式);

9.3 函数

函数是一个功能模块，用来完成特定的任务。在设计c程序时，一般都会把一个复杂的大程序分成若干个子程序，函数就是c程序中的子程序
库函数，和自定义函数

１．函数定义
包括，函数名，参数表列，返回类型和函数体

返回类型　函数名(参数表列)
{
	语句系列；
	return 表达式;
}

int isPrime(int m)
{// 若m是素数则返回１，否则返回０
int t,k;
if(m == 2) return 1;
if(m<2 || m%==0)
return 0;

t =sqrt(m)+1;
for(k=3;k<=t;k+=2)
	if(m%k ==0) return 0;
	return 1;
}

一个函数中可以有多个return语句，在函数的执行过程中，遇到任一个return语句将立即停止函数的执行，并返回到调用函数


２．函数声明

如果一个函数调用另一个函数，在调用函数中必须对被调用函数进行声明
函数声明的形式

返回类型　函数名(参数表列)；

c程序中，函数原型用于声明函数，

void PrintStats(int num,double ave,double std_dev);
int GetIntegerInRange(int,int);


可以将一些函数的声明集中放在头文件中，然后再用"#include"将头文件包含在程序文件中，
也可以放在程序文件的开头。

c程序是从main函数开始执行的，而main函数在程序文件中的位置并没有特殊的要求


３．函数调用

函数名(实参表);


函数调用由函数名和函数调用运算符()组成。
()内有０个或多个逗号分隔的参数(实参)。每个实参是一个变量或表达式，且实参的个数与类型要与被调用函数定义时
的参数(形参)个数和类型匹配。
当被调函数执行时，首先计算实参表达式，并将结果值传送给形参，然后执行函数体，返回值被送到调用函数。
如果函数调用后有返回值，函数调用可以用在表达式中，而无返回值的函数常常作为一个单独的语句使用。
调用一个函数之前必须对被调用函数进行声明


c程序中的参数传递方式为值传递(地址也是一种值)。函数在被调用之前，形参变量并不占内存单元，当函数被调用时，
才为形参变量分配存储单元，并将相应的实参变量的值负值到形参变量单元中。所以，被调用函数在执行过程中修改
形参的值并不影响实参变量的值

当数组作为函数参数时，调用函数中的实参数组只是传送数组在内存中的首地址，即调用函数通知被调
函数在内存中的什么地方找到数组。数组参数并不指定数组元素的个数，除传送数组名外，
调用函数还必须将数组的元素个数通知给被调用函数。
所以，有数组参数的函数圆形

类型说明符　函数名(数组参数，数组元素个数)；

函数参数的引用传递不同于值传递。值传递是把实参的值复制到形参，实参和形参占用不同的存储单元，
形参若改变值，不会影响到实参。而引用传递本质上是将地址传递给形参。
以数组作为函数参数传递时，是引用传递方式，即把实参数组在内存中的首地址传给了形参。
在被调用函数中，如果改变了形参数组中的元素的值，那么在调用函数中，实参数组对应元素的值也会发生相应的
改变。当数组作函数参数时，仅仅传送在内存中的首地址，避免了复制每一个数组元素，
从而节省内存空间和运行时间


４．　递归函数

递归函数是指函数直接调用自己或通过一系列调用语句间接调用自己，是一种描述问题和解决问题的常用方法


递归过程的特点是"先逐步深入，然后再逐步返回，"它有两个基本要素
边界条件和递归模式，边界条件确定递归到何时终止，也成为递归出口；
递归模式表示大问题是如何分解为小问题的，也成为递归体

９．４　指针

指针是内存单元的地址，它可能是变量的地址，数组，的地址
或函数的入口地址。
存储地址的变量称为指针变量，简称指针

指针是ｃ语言中重要概念

９．４．１　

指针类型的变量是用来存放内存你地址

int *ptr1;
char *ptr;


变量ptr1和ptr都是指针类型的变量，ptr1用于保存一个整型变量的地址(称ptr1指向一个整型变量)
ptr用于保存一个字符型变量的地址(称ptr指向一个字符变量)


指针对象和指针指向的对象

指针对象是明确命名的指针变量，如ptr1

指针指向的对象是另一个变量，用"*"和指针变量联合表示　，即为*ptr1


int *pa,pb;   //pa是一个指向整型变量的指针变量，而pb是一个整型变量
int *pa,*pb // pa和pb都声明为指向整型变量的指针变量


１．　空指针

c语言定义了一个标准预处理宏NULL(它的值为０，称为空指针常量)
表示指针不指向任何内存单元。可以把NULL赋给任意类型的指针变量，以初始化指针变量


int *ptr=NULL;
char *ptr1=NULL;


需要注意全局指针变量会被自动初始化为NULL,局部指针变量的初值则是随机的，
编程时常见的一个错误是没有给指针变量赋初值。
未初始化的指针可能是一个非法的地址，导致程序运行时出现非法指针访问错误，
从而是程序异常终止

２．　& 和 *

"&"称为地址运算符，其作用是获取变量的地址
"*" 称为间接运算符，起作用是获取指针所指向的变量，

pa=&pb; 执行后，变量pa就得到了pb的地址(称为pa指向pb)
*pa 表示pa指向的变量(也就是变量pb)

pa=&pb;
*pa = 10; //等价于pb=10

通过指针pa修改了变量pb的值，本质上是对pb的间接访问。
在程序中通过指针访问数据对象或函数对象，提供了运算处理上的一种灵活性



如果指针变量的值是空指针或随机的，通过指针来访问数据就是一种错误(在编译时报错，
或在运行时发生异常)


int *vp; *vp=3;


void*类型可以与任意的数据类型匹配。void指针在被使用之前，必须转换为明确的类型

int i=99;
void *vp =&i;
*(int *)vp=1000; // vp被转换为整型指针，通过指针vp将变量i的值改为1000


3. 指针与堆内存

在程序运行过程中，对内存能够被动态分配和释放，在ｃ程序中通过malloc(或calloc,realloc)和free函数实现该处理要求


int *ptr=(int *)malloc(sizeof(int)) ;// 分配存放一个整型数组的堆内存块，ptr暂存该内存块的首地址

char *str=(char *)malloc(10*sizeof(char)); // 分配存放１０个字符的堆内存块，str暂存首地址

*ptr =100; // 将100存储只在ptr指向的内存块

strcpy(str,"hello"); // 将字符串"hello"复制并存储在str指向的内存块


在堆中分配的内存块的生存期是由程序员自己控制的，应在程序中显式释放

free(ptr);  // 释放ptr指向的堆内存块
free(str); // 释放str指向的堆内存块

注意：

指针为空(指针值为０或NULL)时表示不指向任何内存单元，因此释放空指针没有意义


因为内存资源是有限的，所以若申请的内存块不再需要就及时释放。如果程序中存在违背释放(由于
丢失地址咋程序中也不能再访问)的内存块，则称为内存泄露
持续的内存泄露会导致程序性能降低，甚至崩溃


９．４．２　　指针与数组


１．通过指针访问数组元素


在c程序中，常利用指针访问数组元素，数组名就是数组在内存中的首地址，
即数组中第一个元素的地址。可以通过访问喜爱报



