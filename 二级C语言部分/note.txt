

第1章 程序设计


算法的概念

确定性，有穷性，可行性，输入/输出等特点
1.2 程序和程序设计

程序是指被自己算计连续执行的一条条指令的集合，是人与计算机实现沟通交流的特殊语言



2.程序的构成

（1） 声明区

声明区处在程序文件的所有函数的外部

包含头文件   #include <stream.h>
宏定义   #define PI 3.1456
类定义   class name{...};
结构体定义  struct record{...};
函数声明  void print();
全局变量声明   float H=2.05;
条件编译  #ifdef



(2) 主程序区
主程序以main()函数开始，是整个程序运行的入口，该函数中可能包含的内容有

局部变量的声明： 如 int i =1;
函数调用  如 y=sin(x);
一般运算 如 a=b+c+d/3;
结构控制  如if(a>b)c=a;
对象与结构的处理；
文件的处理等

(3)函数定义区

程序中除了main函数之外，还可以包含其他的函数，每个函数是由函数说明和函数体两个部分构成的


3.程序的书写规范


(1)  文件协定

c语言文件扩展名  .c
c++文件扩展名 .cpp
头文件扩展名.h

(2) 注释

1.注释要尽量解释概括，描述代码的功能和内容
2.文件头，函数头是注释的重点
3.每一个处理段至少有一个注释
4.全局变量，静态变量要有注释
5.每一个结构，类成员要有注释
6.对每一次修改做出记录，记录修改人，修改时间，必要时注明修改原因


4.程序设计过程应该包括分析，设计，编码，测试，排错等不同阶段


1.3  结构化程序设计

三种结构：顺序结构，选择结构，循环结构

循环结构又分为：当型循环和直到型循环

一个c语言程序总是从主函数开始执行的


第2章 数据类型及其运算

基本类型，构造类型，指针类型，无值类型

2.1 数据类型
c语言5种基本数据类型：

字符串 char
整型  int
单精度实型  float
双精度实型  double
空类型   void


c语言还提供了几种聚合类型

数组
指针
结构体 struct
共用体  union
位域
枚举 enum

2.1.1 变量，常量，标识符


1.标识符就是用来表示变量，常量，函数以及文件等的名称


2.变量 可以改变的量
变量=变量名+变量值


一个变量名实质上代表了内存中的一个存储单元，其变量值则代表了该单元存储的内容。
在程序执行过程中，通过变量名来引用变量值


3. 常量


常量分为，数值型常量，字符型常量。
数值型常量又分为整型常量和实型常量


符号常量

c语言用一个标识符表示一个常量，称为符号常量

定义符号常量的一般形式为   #define 标识符   常量


2.1.2  基本数据类型


[signed] int 
unsigned [int]
[singed] short [int]
unsigned short [int]
[sigened] long [int]
unsigend long [int]

float 
double
long double

字符型数据

1. 字符常量
就是用一对单引号括起来的单个字符


2.字符串常量

是用双引号扩括起来的0个或多个字符组成的序列
存储：每个字符串尾部自动加一个'\0'作为字符串结束表示。
字符串常量占用的字节数是字符串的总长度加1


3.字符变量

字符型的定义形式   char 变量名1(=初值)(，变量名(=初值2)..);


4. 字符变量的运算

字符串的连接就是将两个字符串连接在一起. "AB"+"CD"="ABCD";



4.数据类型之间的转换

不同数据类型之间运算，首先要将其转换为相同的类型，c语言类型转换分级别，一般是
(1) 低级向高级转换，需要以下规则


1.若参与类型运算量的不同，则先转换成同一类型，然后进行运算
2.转换按数据长度增加的方向进行，以保证精度不降低
3.所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double 型
4.char型和short型参与运算时，必须先转换成int型
5.在c语言的赋值表达式中，赋值号右边的值先转换成与赋值号左边的变量相同的类型后
再记性赋值

(2) 若高级向低级转换，要到强制类型转换符
(类型说明符)(表达式) 

int(7.7) =7;


运算符和表达式


算术运算符


+ - × 、 - % ++ --

算术运算符优先级   括号>取负值>乘除运算>加减运算

赋值表达式 =


1. 一般形式  变量=表达式
2. 复合赋值

变量  运算符=(表达式)
等价于

变量=变量 运算符(表达式)


3. 赋值运算的数据类型转换


当赋值号左边的变量为短整型，右边的值为长整型时，短整型变量只能接受长整型数值低位上
对应字节(即两个字节)中的数据，相应的，高位上的数据将丢失！


2.2.3  自增，自减运算符

1.前缀形式(++k,--k)


若 int k=6;

若表达式为++k,先进行k增1的运算，k的值为7，表达式的值也为7；
若表达式为--k,则先进行k减1的运算，k的值为5，则表达式的值也为5


2.后缀形式(k++,k--)

若表达式为k++,则表达式先取k的值为6，然后k自行增1运算，使k的值为7
若表达式为k--,则表达式先取k的值为6，然后k自行减1运算， 使k的值为5


2.2.4  逻辑运算符和逻辑表达式


逻辑与  &&
逻辑或 ||
逻辑非  !

关系运算符  < > <= >= == !=


条件运算符 ?


表达式1? 表达式2：表达式3

运算过程：先求解表达式1，若其值为真（非0），则将表达式2的值作为整个表达式的取值；
若表达式1的值为假（0），则将表达式3的值作为整个表达式的取值

max =(a>b)? a:b


优先级

条件运算符 优先级高于赋值，逗号运算符，低于其他运算符

条件运算符具有结合性
右近原则
当一个表达式中出现多个条件运算时，应该将位于最右边的问号与离它最近的冒号配对，
并按这一原则正确区分各条件运算符的运算对象

逗号运算符和逗号表达式，
可以用来连接多个比倒是



第3 章 

表达式；


函数名(实际参数表)；


空语句

while(getchar()!="\n");

符合语句{语句1，语句2,...}


控制语句博爱看

选择，循环，转向和返回
if else switch

while do...while  for 


break continue goto

return


scanf函数是格式输入函数，即按用户指定的格式从键盘上把数据输入到指定的变量之中

scanf("格式说明字符串",变量地址);


%d 十进制证书
%c 单单字符
%f 浮点数

%s 读字符串


% + 附加格式字符+格式字符



变量地址需要的不是变量本身，而是变量的存储地址。
必须在变量a之前加取地址运算符，"&" &a表示变量a在内存中的地址


在%和格式字符之间加入*号，作用是跳过对应的输入数据

在格式字符前加入一个正整数指定输入数据所占的宽度



printf函数是格式化输出函数，一般用于向标准设备按规定格式输出信息，
printf("格式化字符串",参量1，参量2);


% + 附加格式字符 + 格式字符

printf的输出格式为自由格式，两个书之间是否留逗号，空格或回车，
完全取决于格式控制


getchar是字符输入函数，就是从标准输入设备(键盘)上输入一个字符，
直到回车才结束，回车前的所有输入字符都会之歌显示在屏幕上

getchar();

务必在程序(或文件)的开头加上编译与预处理命令(也称为包含命令)
#include<stdio.h>

putchar函数是字符输出函数，作用是向终端输出一个字符

putchar(ch);


其中ch可以是一个字符变量或常量，也可以是一个转义字符。



1.putchar函数的作用是向终端输出一个字符

只能用与单个字符的输出，且一次只能输出一个字符

使用putchar函数时，一定要在程序或文件的开头加上编译预处理名 #include<stdio.h>



第4章  选择结构程序设计

if(表达式)
	语句



if(表达式)
	语句1；
else
	语句2；



if-else-if形式

if(表达式1)
	语句1；
else if(表达式2)
	语句2；
	else if(表达式3)
	语句3；


处理多个分支的情况

if语句的嵌套

if(表达式)
	if语句；

或

if(表达式)
	if语句；
else
if语句；

c语言规定else总是与它前面最近的if配对


用switch实现多分支


switch(表达式)
{
case 常量表达式1：语句1；

default:语句n+1;
}


c语言还提供了一种break语句，专用于跳出switch语句，break语句没有参数



循环结构程序设计


for (语句1;语句2；语句3；)
{循环体}


语句1  是循环变量赋初值，它总是一个赋值语句，用来给循环控制变量赋初值
语句2 是循环条件，它是一个关系表达式，决定什么时候退出循环
语句3 是循环变量变量增量，它定义循环控制变量每循环一次后按什么方式变化

注意，表达式是可选项
省略表达式1， 循环变量赋初值，表示不对循环控制变量赋初值
省略表达式2， 循环条件，则不做其它处理时成为死循环
省略表达式3， 循环变量增量，则不对循环控制变量进行操作，这时可以在语句体中加入修改循环控制变量的语句


for(i=1;i<=100;i++)
sum=sum+i;


for(i=1;i<=100;)
{sum=sum=i;i++;}


while(表达式)
语句；

while 语句的说明

while语句中的表达式一般是关系表达式或逻辑表达式，只要表达式的值为真(非0)即可继续循环

循环体如包含有一个以上的语句，则必须用{}括起来，组成复合语句


do 
 语句
while(表达式)；

它先执行循环中的语句，然后再判断表达式是否为真，如果为真则继续循环，入股为假则终止循环。
do-while循环至少要执行一次循环语句

continue 作为结束本次循环，而不终止整个循环的执行

跳过循环体下面尚未执行的语句，接着进行下一次是否执行循环的判断


break 还可以用在switch语句中，用来跳出switch语句m
当break语句用于do-while,for,while循环语句中，可使程序终止循环而执行循环后面的语句


循环嵌套是逻辑程序中常用的一种方法，就是在一个循环体语句中又包含另一个循环语句，
循环嵌套后，实际上就构成了多层循环，每次执行一次外循环，内层循环都要从头到尾执行一遍


void 是无类型，对应的 void* 无类型指针

常用在程序编写中对定义函数的参数类型，返回值，函数中指针类型进行声明

void作用
1.对函数返回的限定
当函数不需要返回值时，必须使用void限定
例如， void func(int a, char*b)

2.对函数参数的限定

当函数不允许接受参数时，必须使用void限定

例如，int func(void)


数组的定义和引用

在c语言中，数组属于构造数据类型
又分为数值数组，字符数组，指针数组，结构数组等


一维数组是最简单的数组，其逻辑结构是线性表。
一维数组的每个元素只带有一个下标，下标表示了元素在数组中的顺序号

类型名 数组名[常量表达式];


类型名  是任一种基本数据类型或构造数据类型
数组名是用户定义的数组标识符
方括号中的常量表达式表示数据元素的个数，也称数组的长度

int x[1];

存储样式，每个元素只有一个下标，c语言规定每个数组第一个元素的下标总为0(称为数组下标的下界)
最后一个元素的下标为数组个数减1(称为数组下标的上界)


一维数组初始化


给数组赋值的方法除了用赋值语句对数组元素诸葛赋值外，还可以初始化赋值和动态赋值的方法


数组初始化赋值是指在数组定义是给数组元素赋予初值

类型名  数组名[常量表达式] ={值，。。}



int x[10] = {0,1,2,3,4,5,6,7,8,9}


1 可以之分部分元素赋初值
2. 只能给元素逐个赋值，不能给数组整体赋值
3.如果给全部元素赋值，则在数组说明中，可以不给出数组元素的个数

int x[] = {1};


一维数组的引用

数组元素是组成数组的基本单位，数组元素也是一种变量，其标识方法

数组名后跟一个下标，其中下标只能为整型常量或整型表达式，为小数时c编译将自动取整

x[5]
x[i+j]
x[i++]


数组元素通常也称为下标变量。必须先定义数组，才能使用下标变量。
在c语言中之恩给你逐个使用下标变量，而不能一次引用整个数组。
for(i=0;i<10;i++)
printf("%d",x[i])


二维数组

c语言允许构造多为数组

多维数组有多个下标，以标识它在数组中的位置，


类型名  数组名[常量表达式1][常量表达式2]

int a[3][4]


二维数组在概念上是二维的的，但是实际的硬件存储器却是连续编址的，
存储器单元是按一维线性排列的，如何在一维存储器中存放二维数组，
有两种方式：
1.一种是按行排列，即放完一行之后顺次放入第二行
2. 按列排列，即放完一列之后再顺次放入第二列


在c语言中，二维数组是按行排列的，即先放a[0]行，再存放a[1]行，最后存放a[2]行

由于数组a为int类型，该类型占两个字节的内存空间，所以
每个水元素均占两个字节。

二维数组初始化 也是在类型说明时各喜爱报变量赋以初值

数据类型 数组名[行下表达式][列下标表达式] ={{第0行初值表}，{第1行初值表}};


1.初值表中的数据可以少于数组元素的个数。
这时编译器将按数组元素在内存中的排列顺序，将初值表中的数据一一赋予各个元素，而其他元素
将被赋值为0

2. 二维数组可按行分段赋值，也可以按行连续赋值

3. 数组初始化时，行下标表达式可以省略不写，但列下标表达式不嗯给你不谢


二维数组的引用


二维数组的元素也称为双下标变量
数组名[下标][下标]

其中下标应为整型常量或整型表达式

a[3][4]表示  数组三行四列的元素

数组说明的方括号中给出的是某一维的长度，即可取下标的最大值
而数组元素中的下标是该元素在数组中的位置标识。
前者只能是常量，后者可以是常量，变量或表达式

字符数组与字符串


字符数组，用来存放字符量的数组，可以有一维字符数组，二维字符数组，形式与前面介绍的数值数组相同

char c[10];


由于字符型和整型通用，也可以定义为  int c[10]

但这时每个数组元素占2个字节的内存单元

字符数组也可以是二维或多维数组

char c[5][6];

字符数组也允许想数值数值那样定义初始化赋值，
但字符数组与字符串的赋值方法有区别


char c[5] = {'b'};
char c[5] ="6";


字符数组与字符串的输入输出

c语言提供了%c和%s 这两种格式符来进行字符数组的输入和输出。

其中格式符"%c"用于单个字符的输入和输出
格式符"%s"用于整串字符的输入和输出


char a;
char b[20];
scanf("%c",&c);
scanf("%s",b)


字符串处理函数

字符串的输入，输出，合并，修改，比较，转换，复制，搜索


用于输入输出的字符串函数，在使用前应包含头文件"stdio.h"
使用其他字符串函数则应包含头文件"string.h"


1. 字符串输出函数puts
puts(字符数组名)
把字符数组中的字符串输出到显示器上，即在屏幕上显示该字符串

puts函数可以由printf函数取代

当需要按一定格式输出时，通常还是用prinf函数

2.字符串输入函数 gets
gets(字符数组名)
从标准输入设备键盘上输入一个字符串

本函数得到一个函数值，即为该字符数组的首地址


gets函数并不以空格作为字符串输入结束的标志，
而只以回车作为输入结束

3. 字符串连接函数strcart

strcat(字符数组名1，字符数组名2)

把字符数组2中的字符串连接到字符数组1中字符串的后面，并删去字符串1
后的串标志"\0" 本函数返回值是字符数组1的首地址


本程序吧初始化赋值的字符数组与动态赋值的字符串连接起来
字符数组1应定义足够额长度，否则不能全部装入被连接的字符串


4.字符串拷贝函数strcpy
strcpy(字符数组名1，字符数组名2)
把字符数组2中的字符串拷贝到字符数组1中。
串结束标志"\0"也一同拷贝
字符数名2，也可以是一个字符常量。
这时相当于把一个字符串赋予一个字符数组

本函数要求字符数组1有足够的长度，否则不能全部装入所拷贝的字符串

5. 字符串比较函数strcmp
strcmp(字符数组名1，字符数组名2)

按照ASCII码顺序比较两个数组中的字符串， 并由函数返回值返回比较结果

字符串1=字符串2， 返回值=0;
字符串1>字符串2， 返回值>0;
字符串1>字符串2， 返回值<0;

6. 测字符串长度函数strlen

strlen(字符数组名)

测字符串的实际长度(不含字符串结束标志\0)并作为函数返回值

c语言的数组总结


三种赋值

初始化赋值
输入函数动态赋值
赋值语句

对数值数组不能用赋值语句整体赋值，输入或输出，而必须用循环语句逐个对数组元素进行操作

1.数组的类型实际上是指数组元素的取值类型。对于同一个数组，其所有元素的数据类型都是相同
2.数组名的书写规则应符合标识符的书写规定
3.数组名不能与其变量名相同


一维数组在内存中所占的字节数为：数组长度 × sizeof(元素类型)


二维数组的物理存储结构为一维，
即按行序顺序存储在连续存储空间中
例子中，p为指向数组元素的指针变量，初始时，p指向a[0][0]
通过指针p实现对二维数组元素按行i


字符数组中所存字符中有'\0'时，字符数组才能作为字符串使用

char s[] = {'1','2','3','\0'}

用字符常量对字符数组初始化，且最后一个元素的值为字符串结束标志('\0')
所以数组s中存放的就是字符串"123"


char s[] = {"123"}

直接使用字符串"123"对字符数组初始化


char s[4] = {'1','2','3'}

用字面常量对部分元素初始化，系统为第4个元素负初值为空,即'\0'
这样也是可以的！

