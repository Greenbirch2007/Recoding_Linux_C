

第一章  概览


由于c与unix的紧密联系，unix系统通常都带有一个c编译器作为程序包的一部分


1.4 计算机工作的基本原理

（跳着读）
1.5 高级计算机语言和编译器


1.6 使用c语言的7个步骤

1. 定义程序目标
2.设计程序
3.编写代码
4.编译
5.运行程序
6.测试和调试程序
7.维护和修改程序

1.6.1 第一步，定义程序目标

编译器是一个程序，其工作是将源代码转换为可执行代码。
可执行diam是用计算机的本机语言或机器语言表示的代码

不同的计算机具有不同的机器语言，c编译器用来将c语言转换成特定的机器语言。c编译器
还从c的库中向最终程序加入代码。
一个链接其的程序将库例程引入的，在多数系统上，编译器为你运行连接器

最后，形成一个包含计算机可以理解的代码并且能够运行的可执行文件


用c语言编写一个程序时，将编写的内容保存到一个被称为源代码文件的文本文件中，以.c结尾

1.7.1 目标代码文件，可执行文件和库

c编程的基本策略是实用程序将源代码文件转换为可执行文件，此文件包含可以运行的而机器语言代码

c分两部完成这一工作：编译和链接。
编译器将源代码转换为中间代码。链接器将此中间代码与其他代码集合来生成可执行文件。

c使用被划分为两部分的这一方法使得程序便于模块化。

可以分别编译各个模块，然后使用链接器价格编译过的模块结合起来。


如果需要改变一个模块，则不必重新编译所有其他模块，同时，链接器
将你的程序与预编译的库代码结合起来


中间文件的形式有多种选择。最一般的选择，是将源代码转换诶机器语言代码，将
结果放置在一个目标代码文件（或目标文件）中

虽然目标文件包含机器语言代码，但该文件还不能运行。
目标文件包含源代码的转换结果，但它还不是一个完整的程序


目标diam文件中所缺少的第一个元素是叫做启动代码(stat-up code)的东西，
此代码相当于你的程序和操作系统之间的接口

所缺少的第二个元素是库例程的代码。几乎所有c语言程序都利用标准c库中所包含的例程(称为函数)

目标代码不包含这一函数的代码，它只包含声明实用printf()函数的指令。
实际代码存储在另一个称为"库"的文件中。库文件中包含许多函数的目标代码


链接其的作用是将这3个元素(目标代码，系统的标准启动代码和库代码)结合在一起，并
将他们存放在单个文件，即可执行文件中。
对库代码来说，链接其只从库中提取你所用的函数所需要的代码

目标文件和可执行文件都是由机器语言指令组成的。
但目标文件只包含所编写的代码转换成的机器语言，而可执行文件还包含你
所使用的库例程以及启动代码的机器代码


在一些系统上，你必须分别运行编译和链接程序。在另外一些系统上，编译器
可以自动启动链接器，所以只须给出编译命令即可


1.7.2  UNIX系统

1. 在unix系统上的编辑

源文件是过程开始，不是结束

2.在unix系统上编译

我们需要编译器将我们的代码(源代码)转换为计算机的代码(机器代码)
，这些工作的结果是形成可执行文件，其中包含计算机完成任务所需的所有机器代码


a.out的包含程序转换(或编译)结果的可执行问阿金

如果希望保存该可执行文件(a.out),就必须对其进行重命名。
否则该文件会不下一次便宜程序时产生的新的a.out替代

如何处理目标代码呢？cc编译器创建一个与源代码具有相同基本名但扩展名为.o的目标代码文件。
但是无法找到这个文件，因为链接器在可执行程序被生成后该文件删除。
然后，如果原始程序实用多个源代码文件，则会保存目标代码文件。


1.7.3  linux系统

gcc t.c

1.7.4 集成开发环境(windows系统)

1.7.5 IBM PC的 DOS编译器


源代码文件应该是文本文件，而不是字处理程序文件


1.8  语言标准


第二章  c语言概述


2.1  c语言的一个简单实例


2.2  实例说明

2.2.1 第一遍 快速简介


#include <stdio.h>  包含另一个文件


该行告诉编译器包含文件stdio.h中的全部信息

文件stdio.h是所有c语言编译包的一个标准部分。这个文件对关键字输入和现实输出提供支持

int main(void)  函数名

c程序中包含一个或多个函数，它们是c的基本模块。圆括号表表明main()是一个函数的名字
int表示main()函数返回一个整数，而void表示main()函数不接受任何参数。
只须把int和void看作是用来定义main()函数的标准 c方法的一部分

{ 函数体开始
} 函数体结束

int num;  声明语句
num = 1; 赋值语句

printf("asdfaf");  函数调用语句

%d 指示输出num值的位置和形式

c语言可以给它的使用者提供或返回一个数值。现在可以暂时认为这一行用来满足c对
正确书写main()函数所做的要求


2.2.2  第二遍  程序细节


1. #include 指示和头文件

该语句相当于在文件中改行坐在的地方键入文件stdio.h的完整内容。
实际上，它是一种剪切和粘贴操作。这样可以方便地在多个程序间共享公用的信息


#include语句是c预处理器指令。通常c编译器在编译前要对
源代码做一些准备工作：称为预处理(preprocessing)

stdio.h文件作为所有c编译包的一部分提供，它包含了有关输入和输出的信息以供编译器实用。

这个名字代表标准输入输出头文件。在c世界中，人们称出现在文件顶部的信息集合为头(header),
c实现通常都带有许多头文件


最重要的是头文件包含了建立最终的可执行程序时编译器要用到的嘻嘻

头文件指引编译器吧你的程序正确地组合在一起




2. main()函数
3. 注释
4. 花括号，程序体和代码块
花括号还可以用来把函数中的语句聚集到一个单元或代码块中
5. 声明


声明时，数据类型是什么？可以选择什么样的名字？为什么必须对变量进行声明？

1.数据类型
2. 名字的选择
3.声明变量的四个好处

(1) 把所有变量放在一起，可以让读者更容易掌握程序的内容


6.赋值

7. printf()函数

8. return语句

2.3  一个简单程序的结构

程序(program)由一个或多个函数组成，其中必须由一个名为main()的函数。函数的描述
由函数头和函数体组成。函数头(header)包含预处理语句(如#include)和函数名。

可以通过圆括号识别一个函数名，圆括号里面可能是空的。而函数体(body)位于花括号({})中
并由一系列语句组成，每个语句以一个分号结束


#include <stdio.h>
int main(void)
{
    statements;
    return 0;
}

2.4 使程序可读的技巧

选择有意义的变量名和使用注释。
另一个技巧就是使用空格分隔一个函数的概念上的多个部分。
第四个技巧，每个语句用一行。

2.5 更进一步

2.6 多个函数

butler()函数在程序中出现了3次。第一次出现在原型中，通知编译器要用到的该函数。
第二次是在main()函数中以函数调用的形式出现的。
最后，程序给出了函数的定义，即函数本身的源代码。


原型是一种声明的形式，用于告诉编译器正在用一个特殊的函数。它也指明了
函数的属性。butler()函数原型的第一个void说明butler()不返回值(通常，
一个函数可以给调用它的函数返回一个值以供实用，但是butler()函数不返回值。)
第二个void,也就是butler(void)中的void,意思是butler()函数没有参数。


记住，所有的c程序都是从main()函数还是执行的，不管它在程序文件中处于什么位置，c的惯例是
把main()函数放在开头，因为它通常为程序提供最基本的框架


c标准建议您为要用的所有函数提供函数原型。标准包含文件为标准库提供了函数原型，例如，
在标准c中，stdio.h文件中包含有printf()的函数原型


2.7 调试

2.8 关键字和保留标识符

关键字  auto,enum,restrict,unsigned,break,extern,return,
void,case,float,short,volatile,char,for,signed,while,
const,goto,sizeof,_Bool,continue,if,static,_Complex,
default,inline,struct,_Imaginary,do,int,switch,double
long,typedef,else,register,union


2.9 关键概念

2.10 总结



第三章  数据和c