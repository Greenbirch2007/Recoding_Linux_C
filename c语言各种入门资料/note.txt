C语言第一个简单实例
https://www.dotcpp.com/course/c/101002.html

头文件用来提供输入和输出的支持

c语言规定一个程序中有一个或多个函数，他们是c程序的基本模块
但必须有且仅有一个main函数。
因为c程序的执行将从main函数开始，到main函数结束
printf是一个函数，在一个好处

return 0; c函数可以给它的使用者提供或返回一个数值。
{函数体}

头文件  #include<stdio.h>
主函数 int main()
注释 //
花括号{}
声明 int num; 数据类型+变量名 
赋值  num =1;

printf()函数

return 0 语句


变量与常量数据
数据类型和关键字

char,unsigned char , int ,unsigned int
short, unsigned short ,long ,unsigned long
float,double,long double

格式化输出函数printf

printf("格式控制字符串",输出表项);
格式化输入函数scanf

基本运算符
表达式和语句

函数的定义

函数名(类型 形参，类型 形参)


几种调用的方式

1.函数表达式：函数作为表达式中的一项出现在表达式中，以函数返回值参与表达式的运算。
z=max(x,y);  是一个赋值表达式，把max的返回值赋予变量z
2. 函数语句：函数调用的一般形式加上分号即构成函数语句
printf("%d",a);
scanf("d",&b); 都是以函数语句的方式调用函数

3. 函数实参：函数作为另一个函数调用的实际参数出现


变量的存储类型
自动变量，外部变量，静态变量，寄存器变量

静态存储和动态存储


数组


地址与指针

指针和内存  *变量名
数组与指针
字符串与指针

结构体的定义和使用

struct 结构类型名
{
	类型  名称
}

结构体的高级使用

结构体数组，
指向结构体的指针

struct 结构类型名 × 结构指针变量名

共用体的定义和使用

c语言中，允许集中不同类型的变量存放当同一段内存单元中，使用覆盖技术，几个变量互相覆盖
同一个内存段可以用来存放几种不同类型的成员，但是在每一个瞬间只能存放其中的一种而不是同时存放几种。
每一个瞬间只有一个成员起作用，其他的成员不起作用，即不是同时都存在和起作用的。
共同体变量中起作用的成员是最后一次存放的成员，在存入一个新成员后，原有成员就失去作用
共用体变量的地址和它的各更远的地址都是同一地址

不能对共用体变量名赋值，也不能企图引用变量名来得到一个值，不能在定义共用体变量时对它进行初始化


使用typeof定义类型

在c语言中，除系统定义的标准类型和用户自定义的结构体，共用体等类型之外，还可以使用类型说明语句typeof
定义新的类型来代替已有的类型。typeof语句的一般形式是：
typeof 已定义的类型 新的类型；

typeof最常用的作用是给结构体变量重命名


宏的定义

宏替换相当于实现了一个函数调用的功能，而事实上，与函数调用相比，宏调用更能提高c程序的执行效率

文件包含
1.包含命令中的文件名可以

条件编译

在最新的c语言标准中，main函数前的类型为int而不是void


c语言的具体结构

一个c程序就是由若干头文件和函数组成的
#include <stdio.h>就是一条预处理命令，它的作用就是通知c语言编译系统在对
c程序进行正式编译之前需要做一些预处理工作

函数就是实现代码逻辑的一个小的单元


主函数  main函数 这个主函数是c语言的唯一入口
而main前面的int就是主函数的类型

printf()是格式输出函数，这就记住它的功能就是在屏幕上输出指定的信息

return是函数的返回值，根据函数类型的不同，返回的值也是不同的
\n是转义字符中的换行(c程序一定是从主函数开始执行的)


1.一个说明或一个语句占一行，例如：包含头文件，一个可执行语句结束都需要换行
2.函数体内的语句要有明显缩进，通常以按一下tab键为一个缩进
3.括号要成对写，如果需要删除的话也要成对删除；
4. 当一句可执行语句结束的时候末尾需要有分号
5.代码中所有符号均为英文半角符号


变两都有一个名字(标识符)
变量占据内存中一定的存储单元。使用变量之前必须先定义变量，
要区分变量名和变量值是两个不同的概念

int num;
num=100;
int a, b,c;
a=1;
b=2;
c=3;
printf("%d\n",num);

可以先声明再赋值
也可以声明的同时赋值

4个数据类型
1.基本数据类型
2.构造数据类型
3.指针类型
4.空类型

常用的整型，实型，字符串型
格式化输出语句

格式化输出语句，占位输出，是将各种类型的数据按照格式化后的类型以及指定的位置
从计算机上显示
printf("输出格式符",输出项)；

int a= 10;
float b=7.56;
char x="c";
printf("整数:%d,小数：%f, 字符:%c",a,b,x);


格式符的个数要与变量，常量或表达式的个数一一对应


不可改变的常量

在程序执行过程中，值不发生改变的量称为常量

c语言的常量可以范围直接常量和符号常量


直接常量也成为字面量，可以直接拿来使用，无需说明的量


printf("%d\n",100);
printf("%f\n",3.14);
printf("%c\n",'A');
printf("i love time");

在c语言中，可以用一个标识符来表示一个常量，称之为符号常量。
符号常量在使用之前必须先定义，其一般形式为：

#define 标识符 常量值

符号常量不可被改变


自动类型转换

数据类型存在自动转换的情况
自动转换发生在不同数据类型运算时，在编译的时候自动完成


char类型数据转换 为int类型数据遵循ASCII码中的对应值


运算符号

算术运算符，赋值运算符，关系运算符，逻辑运算符，三目运算符

自增与自减运算符

自增运算符为++, 其功能是使变量的值自增1
自减运算符为--,其功能是使变量值自减1

赋值运算符

分为简单赋值运算符和复合赋值运算符

+= -= *= /= %=

复合运算符中运算符和等号之间是不存在空格的

关系表达式的值是真和假，在c程序用整数1和0表示
>=  <= == !=  ，这种符号之间不存在空格


逻辑运算符

与运算 &&
或运算 ||
非运算 !

三目运算符


c语言中的三目运算符 ?: 

表达式1 ？  表达式2：表达式3；

先判断表达式1的值是否为真，如果是真的话执行表示2； 如果是假的话执行表达式3


分支结构之简单if语句

if(表达式){执行代码块;}

break

1.在没有循环结构的情况下，break不能用在单独的if-else语句中
2.在多层循环中，一个break语句只跳出当前循环


关键字

auto, double int struct 
break  else long switch case  enum  register typeof
char extern union return const float short unsigned
continue for signed void default goto sizeof volatile
do   while static if

auto关键字就是修饰一个局部变量为自动的，这意味着每次执行到定义该
变量的时候，都会产生一个新的变量，并且对其从新进行初始化

static变量为静态变量，将函数的内部和外部变量声明成static
变量的意义是不易昂的
在语句块执行期间，static变量将始终保持它的值，并且初始化
操作只在第一次执行时起作用。在随后的运行过程中，
变量将保持语句块上一次执行时的值


register变量称为寄存器存储类变量
用户无法获得寄存器变量的地址

extern变量称为外部存储变量。extern声明了程序中将要用到但尚未定义
的外部变量。通常，外部存储类都用于声明在另一个转换单元中定义的变量


一个工程室友多个c文件组成的。这些源代码文件分别编译，然后链接
成一个可执行模块。把这样的一个程序作为一个工程进行管理，并且
生成一个工程文件来记录所包含的所有源代码文件



表达式  
1.放在赋值语句的右侧
2.放在函数的参数中

在c语言中，逗号既可以作为分隔符，又可以用在表达式中

1.用于间隔说明语句中的变量或函数中的参数

2. 逗号用在表达式中：可以将若干个独立的表达式联结在一起，
表达式1，表达式2,...

自动类型转换


强制类型转换


(类型名)(表达式）


数组

函数


main  move  build paint

函数体包括局部变量的声明和函数的可执行代码


返回值类型 函数名(参数列表）
{
	函数体(函数实现特定功能的过程);
}


指针，结构体和共用体，位运算
预处理，文件，存储狗案例

结构体  结构体的方法  结构体数组和结构体指针   链表 共同体 枚举类型

结构体是一种构造类型，它是有若干成员组成的，其中的每一个成员可以是一个基本数据类型
或又是一个构造类型。

struct 结构体名{ 成员列表};

结构体变量的定义


构造一个新的类型结构来满足程序的设计要求。要使用构造出来的类型才是
构造新类型的目的

声明一个结构体表示的是创建一种新的类型名，要用新的类型名再定义变量

3中定义方式


1.声明结构体类型，再定义变量

struct Product product1;

定义一个基本类型的变量与定义结构体类型变量的不同之处在于，定义结构体变量
不仅要求指定变量为结构体类型，而且要求指定为某一特定的结构体类型，如struct Product;
而定义基本类型的变量时(如整型变量)，只需要指定int型即可


定义结构体变量后，系统就会为其分配内存单元。

为了使得规模较大的程序更便于修改和使用，常常将结构体类型的声明放在一个头文件中，
这样在其他源文件中如果需要使用该结构体类型则可以用#include命令将该头文件包含到源文件中

2.在声明结构类型时，同时定义变量


struct 结构体名{成员列表；}变量名列表；

定义的变量不是只能有一个，可以定义多个变量


3. 直接定义结构体类型变量


struct {成员列表} 变量名列表；

1.类型和变量是不同的，在编译时，对类型是不分配空间的，只对变量分配空间
2.其中结构体的成员也可以是结构体类型的变量


struct date
{
	int year;
	int month;
	int day;
}

struct student
{
	int num;
	char name[30];
	char sex;
	int age;
	struct date birthday;
} student1,student2'


结构体变量的引用


定义结构体类型变量以后，不能直接讲一个结构体变量作为一个整体进行输入和输出。

要对结构体变量进行赋值，存取或运算实质上就是对结构体成员的操作，结构变量成员的
一般形式  结构变量名.成员

product1.cName="icebook";
product2.iPrice=200;

一级一级找到最低一级的成员

student1.birthday.year=199;

不能使用student1.birthday 来访问student1变量中的成员birthday,因为birthday
本身是一个结构体变量

使用结构体变量额成员也可以像使用普通变量一样进行各种运算


product2.iPrice=product1.iPrice+500;
product1.iPrice++;

还可以对结构体变量成员的地址进行引用，也可以对结构体变量的地址进行引用


结构体类型的初始化
结构体类型和其他的基本类型一样，也可以是在定义结构体变量时指定初始值

结构体数组

数组中的元素是根据要求定义的结构体类型而不是基本类型



struct 结构体名
{
	成员列表;}数组名={初始值列表}；

}


结构体指针

一个指向变量的指针，该指针表示的是变量所占内存中的起始地址。
如果一个指针指向结构体变量，那么该指针指向的是结构体变量的起始地址。
同样指针变量也可以指向结构体数组中的元素



结构体类型*指针名

struct Student*pStruct;


使用指向结构体变量的指针访问成员有两种方法，pStruct为指向结构体变量的指针


1. 使用点运算符引用结构成员
(*pStruct).成员名

结构体变量可以使用点运算符对其中的成员进行引用。
*pStruct表示的是指向的结构体变量，因此使用点运算符可以应用结构体中的成员变量


*pStruct一定要用括号


(*pStruct).iNumber=1131;

2. 第二种方法，使用指向运算符引用结构成员

pStruct->成员名；

pStruct->iGrade  表示指向的结构体变量中成员iGrade的值
pStruct->iGrade++ 表示指向的结构体变量中成员iGrade的值，使用后该值加1
++pStruct->iGrade 表示指向的结构体变量中成员iGrade的值加1，计算后再进行使用


指向结构体数组的指针


结构体指针变量不但可以指向一个结构体变量，还可以指向结构体数组，此时指针变量的
值就是结构体数组的首选地址

结构体指针变量也可以直接指向结构体数组中的元素，这时指针变量的值就是该结构体数组元素
的首地址
struct Student* pStruct;
pStruct=student;

因为数组不使用下标时表示的是数组的第一个元素的地址，所以指针指向数组的首地址。
如果想利用指针指向第3个元素，则在数组名附加下标，然后在数组名前使用取地址符号&

pStruct=&student[2];


定义结构体指针变量pStruct指向该数组的首地址
for语句对数组元素进行循环操作，在循环语句块中，pStruct刚开始是指向数组的首地址，
也就是第一个元素的地址，因此使用pStruct->引用的是第一个元素的成员。
使用输出函数显示成员变量表示的数据

当一个循环语句结束后，循环变量进行自加操作，同时pStruct也执行自加运算。
pStruct++表示pStruct的增加值为一个数组元素的大小，pStruct++表示的是
数组元素中的第二个元素student[1]

(++pStruct)->Number，是先执行++操作，使得pStruct指向下一个元素的地址，
然后取得该元素的成员值


(pStruct++)->Number,先取得当前元素的成员值，再使得pStruct指向下一个元素的地址


结构体作为函数汆熟

使用结构体作为函数的参数有3种形式：
1.使用结构体变量作为函数的参数
2.使用结构体变量的成员作为函数的参数
3.使用指向结构体变量的指针作为函数的参数


传值时，实参要与形参的类型一直

包含结构的结构

链表

在链表中，必须利用指针才能实现。因此链表中的结点
应该包含一个指针变量来保存下一个结点的地址

创建动态链表 
malloc函数 void *malloc(unsigned int size);
calloc函数 void *calloc(unsigned n,unsigned size);
free函数 void free(void *ptr);

建立动态链表是值在程序运行过程中从无到有地建立起一个链表，即一个一个地分配结点
的内存空间，然后输入结点中的数据并建立结点间的相连关系

输出链表


共同体 把关键字改成union
结构体定义了一个由多个数据成员组成的特殊类型，而共同体定义了一块为所有数据成员共享的内存


共同体使用几种不同类型的变量存放到同一段内存单元中，共同体在同一时间只能有一个值，
它属于某一个数据成员。由于所有成员位于同一块内存，共同体的大小就等于最大成员的大小

union 共同体名{ 成员列表} 变量列表；

共同体变量的引用

共同体变量.成员名；

不能直接引用共同体变量


共用体变量的初始化

在定义共用体变量时，可以同时对变量进行初始化操作。初始化的值放在一对大括号中

对共同体变量初始化时，只需要一个初始化值就足够了，其类型必须和共用体的第一个成员的类型一致

如果共用体的第一个成员是一个结构体类型，则初始值中可以包含多个用于
初始化该结构的表达式


共用体类型的数据特点

1.同一个内存段可以用来存放几种不同类型的成员。但每次只能存放其中一种，而不是
同时存放所有的类型。在共同体中，只有一个成员起作用，其他的成员不起作用

2. 共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的
成员就失去作用
3.共用体变量的地址和它的各成员的地址是一样的
4. 不能对共用体变量名赋值，也不能企图引用变量名来得到一个值


枚举类型


一个枚举变量包含一组相关的标识符，其中每个标识符都对应一个整数值，称为枚举常量

enum Colors(Red,Green,Blue);

每个标识符都必须是唯一的，而且不能采用关键字或当前作用域内的其他标识符

位运算
预处理
宏定义
#define命令就是要定义一个可替换的宏。
宏定义是预处理命令的一种，它提供了一种可以替换源代码总字符串的机制
根据宏定义中是否有参数，可以将宏定义分为不带参数的宏定义和带参数的宏定义




不带参数的宏定义


宏定义指令#define用来定义一个标识符和一个字符串，以这个标识符来代表
这个字符串，在程序中每次遇到该标识符时就用所定义的字符串替换它
宏定义的作用相当于给指定的字符串起一个别名


#define 宏名  字符串

# 表示这是一条预处理命令
宏名是一个标识符，必须符合c语言标识符的规定
字符串在这里可以是常数，表达式，格式字符串等

#define PI 3.14159

宏定义不是c语句，不需要在行末加分号


#define SIDE 5
#define PERIMETER 4*SIDE
#define AREA SIDE*SIDE

在编写程序时通常将所有的#define放到文件的开始处或独立的文件中，而不是将
它们分散到整个程序中

宏定义用于预处理命令，它不同于定义的变量，只作字符替换，不分配内存空间

带参数的宏定义


#define 宏名 (参数表) 字符串

1. 对带参数的宏的展开只是将语句中的宏名后面括号内的实参字符串代替#define
命令行中的形参
2.在宏定义时，在宏名与带参数的括号之间不可以加空格，否则会将空格以后的
字符都作为替代字符串的一部分
3. 在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义


#include 指令

在一个源文件中使用#include指令可以将另一个源文件的全部内容包含进来，
将另外的文件包含到本文件之中。
#include使编译程序将另一个源文件嵌入带有#include的源文件，被读入
的源文件必须用双引号或尖括号括起来


文件包含应用

一般情况下将如下内容放入.h文件
1.宏定义
2.结构，联合和枚举声明
3.typeof声明
4.外部函数声明
5.全局变量声明

1. 一个#include命令只能指定一个被包含的文件
2.文件包含是可以嵌套的，即在一个被包含文件中还可以包含另一个被包含文件
3.若file1.c中包含文件file2.h，那么在预编译后就成为一个文件而不是两个文件，
这是如果file2.h中有全局静态变量，则该全局变量在file1.c文件中也有效，
这是不需要再用extern声明


条件编译


#if 命令


#if 常数表达式
	语句段
#endif


如果常数表达式为真，则这段程序被编译，否则跳过不编译

#ifdef 及 #ifnde
#ifdef 宏替换名
语句段
#endif

如果宏替换名已被定义过，则对"语句段"进行编译；如果未定义#ifdef后面的
宏替换名，则不对语句段进行编译


#ifdef 可与#else连用，构成的一般形式如下

#ifdef 宏替换名
语句段1
#else
语句段2
#endif


#undef 命令

#line命令
#pragma命令

文件

所有文件都通过流进行输入，输出操作。与文本流和二进制流对应，
文件可以分为文本文件和二进制文件两大类
1.文本文件，也称为ASCII文件。这种文件在保存时，每个字符对应一个字节，
用于存放对应的ASCII码
2.二进制文件，不是保存ASCII码，而是按二进制的编码方式来保存文件内容



从用户的角度(或所依附的介质)看，文件可分为普通文件和设备文件两种
1.普通文件是指驻留在磁盘或其他外部介质上的一个有序数据集
2.设备文件是指与主机相连的各种外部设备，如显示器，等。
在操作系统中，把外部设备也看作一个文件来进行管理，把它们的输入，输出
等同于磁盘问价你的读和写


把文件内容可分为：源文件，目标文件，可执行文件，头文件，数据文件等
在c语言中，文件操作都是由库函数来完成的


文件基本操作


文件的基本操作包含文件的打开和关闭。
除了标准的输入，输出文件外，其他所有的文件都必须先打开再使用，而使用后
也必须关闭该文件


文件指针是一个指向文件有关信息的指针，这些信息包含文件名，状态和当前位置，
它们保存在一个结构体变量中。
在使用文件时需要在内存中为其分配空间，用来存放文件的基本信息。
该结构体类型是由系统定义的，c语言规定该类型为FILE型
FILE *fp;
fp是做一个指向FILE类型的指针变量


文件的打开

fopen函数用来打开一个文件，打开文件的操作就是创建一个流。
fopen函数的原型在stdio.h中，
FILE *fp;
fp=fopen(文件名，使用文件方式);

文件名，是将要被打开文件的文件名
使用文件方式，是指对打开的文件要进行读还是写

FILE *fp;
fp=("123.txt","r");

文件打开失败的几个原因

1.指定的盘符或路径不存在
2.文件名中含有无数字符
3.以r模式打开一个不存在的文件


文件的关闭

文件在使用完毕后，应使用fclose函数将其关闭。
fclose(文件指针)；
fclose(fp);

fclose函数也带回一个值，当正常完成关闭文件操作时，fclose函数返回值为0
否则返回EOF

在程序结束之前应关闭所有文件，这样做的目的是防止因为没有关闭文件而造成的
数据流失

文件的读写

打开文件后，即可对文件进行读出或写入的操作

ch=fputc(ch,fp);

fgetc函数


存储管理

内存组织方式
1.可执行代码
2.静态数据  可执行代码和静态数据存储在固定的内存位置

3.动态数据(堆)
程序请求动态分配的内存来自内存池，也就是堆
4. 栈
局部数据对象，函数的参数以及调用函数和被调用函数的联系放在称为栈的内存池中

堆和栈既可以是被所有同时运行的程序共享的操作系统资源，
也可以是使用程序独占的局部资源


堆和栈

通过内存组织方式可以看到，堆用来存放动态分配内存空间，而栈用来存放局部数据
对象，函数的参数以及调用函数和被调用函数的关系

堆

在内存的全局存储空间当中，用于程序动态分配和释放的内存块称为自由存储空间，
通常称之为堆

在c程序中，是用malloc函数和free函数来从堆中动态地分配和释放内存

动态管理

malloc



网络套接字编程

计算机网络基础

IP地址

网络地址  广播地址   回送地址

osi七层参考模型

1. 物理层
利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性，规格和传输速度
2.数据链路层
数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过
物理介质传输数据的方法
3. 网络层

网络层能够将传输的数据封包，然后通过路由选择，分段组合等控制，将信息从源设备
传送到目标设备

4. 传输层

传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时
对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误
地传送到网络层

5.会话层

会话层是用户应用程序和网络层的接口，它能够建立与其他设备的连接，即会话
并且它能够对会话进行有效的管理


6. 表示层

表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，
并负责设备之间所需要的字符集和数据和转换

7. 应用层


应用层负责网络中应用程序和网络操作系统之间的联系。
简历和结束使用者之间的连接，管理建立相互连接使用的应用资源

地址解析  MAC, ARP

域名系统
TCP/IP协议

端口
套接字的引入
socket的出现，使得程序员可以很方便地访问TCP/IP,从而开发各种网络应用的
程序。后来，套接字被引进到windows等操作系统，称为开发网络应用程序的有效工具

套接字存在于通信区域中，通信区域也称为地址族，主要用于将通过套接字通信的进程的
公有特性综合在一起。
套接字通常只与同一区域的套接字交换数据。windows sockets只支持一个
通信区域---AF_INET国际域，使用国际协议族通信的进程使用该域


网络字节顺序

套接字是网络通信的基础，是网络通信的基本构建，winsock


套接字实际上是一个指向传输提供者的句柄。
在winsock中，就是通过操作该句柄来实现网络通信和管理的。

原始套接字
流式套接字  TCP
数据包套接字 UDP


TCP的套接字的socket编程

TCP是面向连接的可靠的传输协议。利用TCP协议进行通信时，首先要建立通信
双方的连接。一旦连接建立完成，就可以进行通信。
TCP提供了数据确认和数据重传的机制，保证了发送的数据一定能到达通信的对方


基于TCP面向连接的socket编程的服务器段流程
1.创建套接字socket
2. 将创建的套接字绑定(bind)到本地的地址和端口上
3.设置套接字的状态为监听状态(listen),准备接收客户端的连接请求
4.接受请求(accpet),同时返回得到一个用于连接的新套接字
5.使用这个新套接字进行通信(通信函数使用send/recv)
6.通信完毕，释放套接字资源(closesocket)


基于TCP面向连接的socket编程的客户端流程

1.创建套接字socket
2.向服务器发出连接请求(connect)
3.请求连接后与服务器进行通信操作(send/recv)
4.释放套接字资源(closesocket)

在服务器的一端，当调用accpet函数时，程序就会进行等待，直到有客户端调用
connect函数发送连接请求，然后服务器接受该请求，这样服务器与客户端
就建立了连接，当两者建立连接后就可以进行通信了

在服务器端要建立套接字绑定到指定的主机IP和端口上等待客户的请求，但是对于
客户端来说，当发起连接请求并被接受后，在服务器端就保存了该客户端你的IP地址和
端口好的信息。
对于服务器端来说，一旦建立连接之后，实际上它已经保存了客户端的IP地址和端口号
的信息了，因此可以利用返回的套接字进行与客户端的通信



