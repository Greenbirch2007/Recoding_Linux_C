
算法的基本概念：算法复杂度的概念和意义(时间复杂度和空间复杂度)
数据结构的定义　　数据的逻辑结构和存储结构　　数据结构的图形表示　　线性结构与非线性结构的概念

线性表的定义　　线性表的的顺序存储结构及其插入与删除运算

栈和队列的定义　　　栈和队列的顺序存储结构及其基本运算
线性单链表，双向链表与循环链表的结构及其基本运算


树的基本概念　　双叉树的定义及其存储结构　　双叉书的前序，中序和后序遍历


顺序查找与二分法查找算法　　　基本排序算法(交换类排序，选择类排序，插入类排序)


１．１　　算法


算法是指对解题方案的准确而完整的描述，是一系列解决问题的清晰指令


２．算法的基本特征

(1) 可行性

算法在特定的执行环境中年执行应当能够得到满意的结构，即必须有一个或多个输出

(2) 确定性
表现在对算法中每一步的描述都是明确的，没有多义性

(3)　有穷性　　算法必须在执行有限个步骤之后终止

(4) 拥有足够额情报　　算法在拥有过足够的输入信息和初始化信息时，才是有效的


３．算法的基本要素

(1) 数据对象的运算和操作

算术运算，逻辑运算，关系运算，数据传输(输入，输出，赋值等)

(2) 算法的控制结构

一个算法的功能结构不仅取决于所用的的操作，执行顺序也很重要

算法有３种基本控制结构，顺序结构，选择结构，循环结构


４．　算法基本设计方法

常用的算法设计方法：列举法，归纳法，递推法，减半递归法技术和回溯法

算法复杂度

算法的时间复杂度是指执行算法所需要的计算工作量
T(n) =O (f(n))
T(n) 代表时间复杂度
f(n)　是关于计算机算法问题规模n的函数
其中，问题的规模就是指算法计算量的大小

空间复杂度


算法的空间复杂度是指算法需要消耗的内存空间

包括３个部分，输入数据所占的存储空间，程序本身所占的存储空间，算法执行过程中所需要的额外逛空间
为了降低算法的空间复杂读，主要应减少输入数据所占的存储空间以及额外空间，通常采用压缩存储技术


１．２　　数据结构


数据，　是需要处理的数据元素的集合，一般，这些数据元素，具有某个共同的特征
结构，就是关系，是集合中各个数据元素之间存在的某种关系(或联系)


数据的逻辑结构与存储结构

１．逻辑结构，是指反映数据元素之间逻辑关系额数据结构，一般用二元组来表示，B=(D,R)
B　表示数据逻辑结构
D　是数据元素的集合
R　表示数据元素之间的逻辑关系


２．存储结构　又称为物理结构，是指数据的逻辑结构在计算机存储空间中的存放方式。
主要存储方式，顺序存储结构，链式存储结构


(1) 顺序存储结构

把逻辑上相邻的数据元素存储在物理位置上相邻的存储单元中，结点之间的逻辑关系由存储单元的邻近关系来体现，
优点，节省存储空间，这样，可以实现对结点的随机存取，即每一个结点对应一个序号，
由该序号可以直接计算出来结点的存储地址。
缺点，不便于修改

(2)  链式存储结构
又叫做，链接存储结构。就是每个结点中至少包含一个指针域，用指针来体现数据元素之间逻辑上的关系

它不要求逻辑上相邻的元素在物理位置上也相邻。

数据结构的图形表示

在数据结构的图形表中，对于数据集合Ｄ中的每一个数据元素用中间标有元素值的方框表示，
一般称为数据结点，或结点。
为了进一步表示各数据元素之间的前后件关系，对于关系R中的每一个二元组，用一条有向线段从前件结点志向后件结点


线性结构与非线性结构

按照数据结构中各数据元素之间前后件关系的复杂度可分为　线性结构和非线性结构


１．线性结构
是指该结构中的结点之间存在一对一的关系，
特点是开始结点和终端结点都是唯一的
出开始结点和终端结点外，其余结点都是有且仅有一个直接前驱和一个直接后驱

线性结构的存储结构有，顺序表(数组)，链表，堆栈结构，队列结构等


２．非线性结构　　　是指数据元素之间存在一个对多个或多个对多个的关系。
包含，集合，树形结构，图形结构或网状结构。　其中集合是一种关系极为松散的结构



１．３　　线性表及其顺序存储结构


１线性表　也成为顺序表，是最基本的一个中数据结构


线性表中数据元素之间的关系是一对一的，即除了第一个和最后一个数据元素之外，其他数据元素都是首尾相接。
线性表的逻辑结构简单，便于实现和操作
线性表在实际应用是最广泛采用的一种数据结构

其中的数据元素可以是一个单独的数字或字母，可以是矩阵中的一行或一列向量，
也可以是二维表中的一条记录


２非空线性表
特征
(1)　有且只有一个根结点a1,它无前件
(2) 有且仅有一个终端结点an,它无后件
(3) 除根结点与终端结点外，其他所有结点有且仅有一个前件和后件。
结点个数n称为线性表的长度，当n=0时，称为空表


线性表有两种存储结构：顺序存储和链接存储


１．　线性表的顺序存储结构－－－－　顺序表


用顺序存储表示的线性表称为顺序表。顺序存储就是将元素一个接一个地存储在存储单元中，是最简单的存储方法


２．顺序表的认识


(1) 顺序表的特征
顺序表中所有的数据元素所占的存储空间是连续的
线性表中各数据元素在存储空间中是按逻辑顺序依次存放的

(2) 在顺序表中计算元素的存储地址


第i个元素ai的存储地址为:ADR(ai) = ADR(ai) + (i-1)k,ADR(ai)为第一个元素的地址
k代表每个元素所占的字节数


线性表的运算


１．线性表的插入运算  就是在线性表中插入一个新的数据元素

当线性表的存储空间已经满了之后，就不能再插入新的数据元素，
如果继续插入，就会产生"上溢的错误"

２．线性表的删除运算　就是在线性表中删除一个数据元素

线性表的顺序结构适合用小线性表，或建立之后不常变动的线性表


１．４　　栈和队列

栈及其队列的基本运算 

栈又名堆栈，是一种运算受限的线性表。先进后出
通常用指针top指示栈顶的位置，指针bottom指示栈底的位置

入栈运算就是往栈中插入一个数据，退栈运算就是从栈中删除一个数据，通常栈顶指针top来反映栈中元素的动态变化


栈的基本运算　　stack

１．初始化栈INISTACK(&S)  将栈S置为一个空栈(不包含任何元素)
２．进栈PUSH(&S,X)
将元素X插入到栈S中，也称为入栈，插入，压入
3. 出栈POP(&S)
删除栈S中的栈顶元素，也称为退栈，删除，弹出

4. 取栈顶元素GETTOP(S)
取栈Ｓ中栈顶元素(即栈顶指针top指向的元素)的值赋给一个指定的变量
5. 判断栈空EMPTY(S)
判断栈S是否为空，若为空，返回值为１，否则为０

队列的定义　　进行插入操作的端称为称为队尾，进行删除操作的端称为队头
队列，　先进先出，后进后出


队列的主要运算

１．设置一个空队列
２．插入一个新的队尾元素
3. 删除队头元素，称为出队
４．　读取队头元素

队列的顺序存储结构

１．线性队列(顺序队列)

下溢现象，当队列为空时，做退队运算产生的溢出现象，下溢是正常现象

真上溢现象，当队列满时，做进栈运算产生空间溢出的现象，是错误状态，要避免

假上溢现象，由于入队和退队操作中，头尾指针只增加不见效

